/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *removeNthFromEnd(ListNode *head, int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(!head)
            return NULL;
        
        ListNode *fast = head;
        ListNode *slow = head;
        ListNode *prev = head;
        
        if(n == 1)
        {
            // more than one node, delete the last node
            if(fast -> next) {
                
                while( fast -> next )
                {
                    prev = fast;
                    fast = fast -> next;
                }
                
                prev -> next = NULL;
                return head;
            }
            
            else
            {
                //only one node, delete the last node
                return NULL;
            }
        }
        
        // delete one node between (2, n)
        else {
            
            while (n > 1) {
                fast = fast -> next;
                n --;
            }
            
            //if n equals the number of nodes in the list
            if(!(fast -> next))
            {
                ListNode * tmp = head -> next;
                head = tmp;
                return head;
            }
            
            while(fast -> next) {
                prev = slow;
                slow = slow -> next;
                fast = fast -> next;                
            }
            
            prev -> next = slow ->next;
            return head;
        }
    }
};
